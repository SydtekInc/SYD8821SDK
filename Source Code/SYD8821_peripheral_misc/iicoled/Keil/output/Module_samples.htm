<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\Module_samples.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\Module_samples.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Thu May 30 19:07:14 2019
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; oled_printf &rArr; oled_8x16str &rArr; oled_set_pos &rArr; oled_wrcmd &rArr; i2c_write &rArr; i2c_master_trigger_write &rArr; dbg_printf_sel &rArr; __c89vsprintf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[20]">CAPDET_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">CAPDET_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">CAPDET_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1e]">GPADC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[6]">GPIO_IRQHandler</a> from gpio.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[a]">I2CM0_IRQHandler</a> from i2c_master.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[b]">I2CM1_IRQHandler</a> from i2c_master.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[e]">I2CS_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[24]">I2S_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[25]">INTCOMB_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1c]">IR_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1b]">ISO_7816_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[22]">LLC2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[23]">LLC3_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[7]">LLC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[19]">M2M_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[21]">PDM_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[16]">PWM1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[17]">PWM2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[18]">PWM3_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[8]">SPIM_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[9]">SPIS_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[15]">SW_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_armcm0.o(.text) referenced from startup_armcm0.o(.text)
 <LI><a href="#[f]">TIMER0_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[10]">TIMER1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[11]">TIMER2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[12]">TIMER3_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[13]">TIMER4_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1d]">TRNG_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[c]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1f]">UART1_IRQHandler</a> from uart.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[d]">UART2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[14]">WDT_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_armcm0.o(.text)
 <LI><a href="#[29]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[26]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[67]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[71]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[72]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[73]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[74]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[75]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; oled_printf &rArr; oled_8x16str &rArr; oled_set_pos &rArr; oled_wrcmd &rArr; i2c_write &rArr; i2c_master_trigger_write &rArr; dbg_printf_sel &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pad_mux_write
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_printf
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_set_speed
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_set_address_mode
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_enable_int
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_enable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpo_toggle
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpo_config
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpi_config
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[3c]"></a>oled_wrdat</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, oled_9632.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = oled_wrdat &rArr; i2c_write &rArr; i2c_master_trigger_write &rArr; dbg_printf_sel &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutGB1616
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_8x16str
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_6x8str
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_fill
</UL>

<P><STRONG><a name="[3e]"></a>oled_set_pos</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, oled_9632.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = oled_set_pos &rArr; oled_wrcmd &rArr; i2c_write &rArr; i2c_master_trigger_write &rArr; dbg_printf_sel &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_wrcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PutGB1616
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_8x16str
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_6x8str
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[36]"></a>oled_init</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, oled_9632.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = oled_init &rArr; oled_set_pos &rArr; oled_wrcmd &rArr; i2c_write &rArr; i2c_master_trigger_write &rArr; dbg_printf_sel &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpo_set
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_set_pos
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_fill
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_wrcmd
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pad_mux_write
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpo_config
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>oled_6x8str</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, oled_9632.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_set_pos
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_wrdat
</UL>

<P><STRONG><a name="[41]"></a>oled_8x16str</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, oled_9632.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = oled_8x16str &rArr; oled_set_pos &rArr; oled_wrcmd &rArr; i2c_write &rArr; i2c_master_trigger_write &rArr; dbg_printf_sel &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_set_pos
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_wrdat
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_printf
</UL>

<P><STRONG><a name="[42]"></a>PutGB1616</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, oled_9632.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_set_pos
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_wrdat
</UL>

<P><STRONG><a name="[37]"></a>oled_printf</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, oled_9632.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = oled_printf &rArr; oled_8x16str &rArr; oled_set_pos &rArr; oled_wrcmd &rArr; i2c_write &rArr; i2c_master_trigger_write &rArr; dbg_printf_sel &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_8x16str
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>gpi_irq_set_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>gpi_config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpi_config
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>pad_input_configure</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>gpo_config</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpo_config
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>gpo_toggle</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpo_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>gpo_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpo_set
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[78]"></a>gpo_clr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>gpi_get_val</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>gpi_enable_int</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>gpi_disable_int</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>GPIO_IRQHandler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>delay_ms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>delay_us</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>pad_mux_read</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pad_mux_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>pad_mux_write</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pad_mux_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pad_mux_write
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>uart_0_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[c]"></a>UART0_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>uart_1_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[1f]"></a>UART1_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>uart_write</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>uart_read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue
</UL>

<P><STRONG><a name="[4c]"></a>uart_queue_size</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_size
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
</UL>

<P><STRONG><a name="[7f]"></a>uart_get_ctrl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>dbg_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dbg_init &rArr; debug_uart_0_init
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>dbg_printf</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dbg_printf &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_hexdump
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>dbg_printf_sel</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dbg_printf_sel &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_trigger_write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_trigger_read
</UL>

<P><STRONG><a name="[52]"></a>dbg_hexdump</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, debug.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>

<P><STRONG><a name="[46]"></a>queue_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_1_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_0_init
</UL>

<P><STRONG><a name="[80]"></a>queue_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>enqueue_all</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[48]"></a>enqueue</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>dequeue</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
</UL>

<P><STRONG><a name="[4d]"></a>is_queue_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_queue_size
</UL>

<P><STRONG><a name="[4e]"></a>queue_size</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_queue_size
</UL>

<P><STRONG><a name="[a]"></a>I2CM0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2CM0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>I2CM1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2CM1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>i2c_master_get_ctrl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c_master.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>i2c_master_set_irq_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c_master.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>i2c_master_enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_master_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>i2c_master_enable_int</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_master_enable_int
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>i2c_master_set_read_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, i2c_master.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>i2c_master_set_speed</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_master_set_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>i2c_master_set_address_mode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_master_set_address_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>i2c_master_trigger_read</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf_sel
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_read
</UL>

<P><STRONG><a name="[56]"></a>i2c_master_trigger_write</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = i2c_master_trigger_write &rArr; dbg_printf_sel &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf_sel
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
</UL>

<P><STRONG><a name="[3b]"></a>i2c_write</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, i2c_master.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = i2c_write &rArr; i2c_master_trigger_write &rArr; dbg_printf_sel &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_trigger_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_wrdat
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_wrcmd
</UL>

<P><STRONG><a name="[57]"></a>i2c_read</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, i2c_master.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_master_trigger_read
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAPDET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPDET_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPDET_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>I2CS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>INTCOMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ISO_7816_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LLC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>LLC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>LLC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>M2M_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SPIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SPIS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_all
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[2b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[8c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[8d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[8e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[8f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[60]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[69]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[90]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[91]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[43]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf_sel
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_printf
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>

<P><STRONG><a name="[92]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[68]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[93]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[94]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[95]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3a]"></a>oled_wrcmd</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, oled_9632.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = oled_wrcmd &rArr; i2c_write &rArr; i2c_master_trigger_write &rArr; dbg_printf_sel &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_set_pos
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_fill
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[3d]"></a>oled_fill</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oled_9632.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = oled_fill &rArr; oled_wrdat &rArr; i2c_write &rArr; i2c_master_trigger_write &rArr; dbg_printf_sel &rArr; __c89vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_wrdat
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_wrcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[47]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_1_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_0_init
</UL>

<P><STRONG><a name="[45]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_1_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_0_init
</UL>

<P><STRONG><a name="[4f]"></a>debug_uart_0_init</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_uart_0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
</UL>

<P><STRONG><a name="[50]"></a>debug_uart_write</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = debug_uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf_sel
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_printf
</UL>

<P><STRONG><a name="[6b]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6a]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>

<P><STRONG><a name="[6e]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6d]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\Module_samples.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\Module_samples.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Wed Oct 16 17:02:24 2019
<BR><P>
<H3>Maximum Stack Usage =       1232 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ble_evt_callback &rArr; ble_gatt_write &rArr; ota_cmd &rArr; BLSetConnectionUpdate &rArr; BLE_SendData &rArr; gap_s_gatt_data_send &rArr; smart_latency_start &rArr; __aeabi_dmul
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[25]">CAPDET_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">CAPDET_IRQHandler</a><BR>
 <LI><a href="#[c2]">SmpPairingPublicKey</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c2]">SmpPairingPublicKey</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33]">B01_Hook_Callback</a> from rom.o(.text) referenced from rom.o(.text)
 <LI><a href="#[25]">CAPDET_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[23]">GPADC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[b]">GPIO_IRQHandler</a> from gpio.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[f]">I2CM0_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[10]">I2CM1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[13]">I2CS_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[29]">I2S_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2a]">INTCOMB_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[21]">IR_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[20]">ISO_7816_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[27]">LLC2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[28]">LLC3_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[c]">LLC_IRQHandler</a> from rom.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1e]">M2M_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[26]">PDM_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1b]">PWM1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1c]">PWM2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1d]">PWM3_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[d]">SPIM_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[e]">SPIS_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1a]">SW_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2d]">SystemInit</a> from system_armcm0.o(.text) referenced from startup_armcm0.o(.text)
 <LI><a href="#[14]">TIMER0_IRQHandler</a> from timer.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[15]">TIMER1_IRQHandler</a> from timer.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[16]">TIMER2_IRQHandler</a> from timer.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[17]">TIMER3_IRQHandler</a> from timer.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[18]">TIMER4_IRQHandler</a> from timer.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[22]">TRNG_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[11]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[24]">UART1_IRQHandler</a> from uart.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[12]">UART2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[19]">WDT_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[34]">__main</a> from __main.o(!!!main) referenced from startup_armcm0.o(.text)
 <LI><a href="#[2b]">ble_evt_callback</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[30]">gap_evt_Callback</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[31]">sw_indicate_timer_callback</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[2f]">sw_timer_latency_callback</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[32]">sw_timer_update_callback</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[2c]">timer_uart_wait</a> from main.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[34]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[35]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[37]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[10b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[38]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[10d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3c]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[10e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[110]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[111]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[112]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[113]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[114]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[115]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[116]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[117]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[118]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[119]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[11e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[11f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[120]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[121]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[122]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[41]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[123]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[124]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[126]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[127]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[128]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[129]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[36]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[12a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[39]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3b]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[12b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3d]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; uart_to_ble_transfer &rArr; BLE_SendData &rArr; gap_s_gatt_data_send &rArr; smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[12c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[106]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[40]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[12d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[42]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[d8]"></a>B01_correct_TXPacket_length</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rom.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B01_Hook_Callback
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[48]"></a>BLE_SendData</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BLE_SendData &rArr; gap_s_gatt_data_send &rArr; smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_gatt_data_send
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ble_transfer
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLSetConnectionUpdate
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatt_read
</UL>

<P><STRONG><a name="[4a]"></a>BLSetConnectionUpdate</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BLSetConnectionUpdate &rArr; BLE_SendData &rArr; gap_s_gatt_data_send &rArr; smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_smart_update_latency
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_link_parameters_get
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_cmd
</UL>

<P><STRONG><a name="[2b]"></a>ble_evt_callback</STRONG> (Thumb, 562 bytes, Stack size 1032 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = ble_evt_callback &rArr; ble_gatt_write &rArr; ota_cmd &rArr; BLSetConnectionUpdate &rArr; BLE_SendData &rArr; gap_s_gatt_data_send &rArr; smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_adv_start_powersaving
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatt_write
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatt_read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>uart_to_ble_transfer</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = uart_to_ble_transfer &rArr; BLE_SendData &rArr; gap_s_gatt_data_send &rArr; smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_size
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendData
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_uart_wait
</UL>

<P><STRONG><a name="[66]"></a>ble_to_uart_transfer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ble_to_uart_transfer &rArr; uart_write
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>timer_uart_wait</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = timer_uart_wait &rArr; uart_to_ble_transfer &rArr; BLE_SendData &rArr; gap_s_gatt_data_send &rArr; smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ble_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>Timer_Module_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Timer_Module_Init &rArr; timer_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>gpio_init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_init &rArr; pad_mux_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pad_mux_write
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpo_config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpi_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>ble_uart_init</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_uart_init &rArr; pad_mux_write
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pad_mux_write
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>main</STRONG> (Thumb, 244 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; uart_to_ble_transfer &rArr; BLE_SendData &rArr; gap_s_gatt_data_send &rArr; smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_state_get
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_rc_calibration
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_clock_set
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_32k_clock_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_size
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_adv_start_powersaving
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sched_execute
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Module_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_to_uart_transfer
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ble_transfer
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12f]"></a>gpi_irq_set_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>gpi_config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpi_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[130]"></a>pad_input_configure</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>gpo_config</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpo_config
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[131]"></a>gpo_toggle</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>gpo_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>gpo_clr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>gpi_get_val</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>gpi_enable_int</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>gpi_disable_int</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>GPIO_IRQHandler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[137]"></a>pad_mux_read</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pad_mux_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>pad_mux_write</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pad_mux_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pad_mux_write
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[78]"></a>uart_0_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
</UL>

<P><STRONG><a name="[11]"></a>UART0_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>uart_1_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_init
</UL>

<P><STRONG><a name="[24]"></a>UART1_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>uart_write</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uart_write
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_to_uart_transfer
</UL>

<P><STRONG><a name="[7d]"></a>uart_read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue
</UL>

<P><STRONG><a name="[7e]"></a>uart_queue_size</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_size
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_queue_empty
</UL>

<P><STRONG><a name="[138]"></a>uart_get_ctrl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>queue_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_1_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_0_init
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_init
</UL>

<P><STRONG><a name="[139]"></a>queue_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>enqueue_all</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = enqueue_all &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatt_write
</UL>

<P><STRONG><a name="[7b]"></a>enqueue</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>dequeue</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_to_uart_transfer
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ble_transfer
</UL>

<P><STRONG><a name="[62]"></a>is_queue_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_queue_size
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_uart_wait
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ble_transfer
</UL>

<P><STRONG><a name="[63]"></a>queue_size</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_queue_size
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ble_transfer
</UL>

<P><STRONG><a name="[14]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER4_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>is_timer_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
</UL>

<P><STRONG><a name="[6a]"></a>timer_enable</STRONG> (Thumb, 186 bytes, Stack size 20 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_timer_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Module_Init
</UL>

<P><STRONG><a name="[68]"></a>timer_disable</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_timer_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Module_Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_uart_wait
</UL>

<P><STRONG><a name="[76]"></a>timer_state_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>ota_cmd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ota_cmd &rArr; BLSetConnectionUpdate &rArr; BLE_SendData &rArr; gap_s_gatt_data_send &rArr; smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFwUpgrade
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFwWrite
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFwErase
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLSetConnectionUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatt_write
</UL>

<P><STRONG><a name="[4f]"></a>ota_rsp</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ota_rsp &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatt_read
</UL>

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAPDET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPDET_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPDET_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>GPADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>I2CM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>I2CM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>I2CS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>INTCOMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ISO_7816_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LLC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LLC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>M2M_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SPIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPIS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[32]"></a>sw_timer_update_callback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[58]"></a>gap_s_ble_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gap_s_ble_init &rArr; _rom_init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_init
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[88]"></a>gap_s_disconnect</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_disconnect
</UL>

<P><STRONG><a name="[13b]"></a>gap_s_validate_irk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>gap_s_ble_gen_random_private_address</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>gap_s_ble_address_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>gap_s_ble_address_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv_data
</UL>

<P><STRONG><a name="[13e]"></a>gap_s_ble_feature_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>gap_s_ble_feature_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>gap_s_ble_slave_feature_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>gap_s_ble_slave_feature_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>gap_s_adv_access_code_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>gap_s_adv_access_code_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>gap_s_adv_parameters_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv_data
</UL>

<P><STRONG><a name="[47]"></a>gap_s_adv_data_set</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_s_adv_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv_data
</UL>

<P><STRONG><a name="[144]"></a>gap_s_adv_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>gap_s_adv_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>gap_s_adv_start_powersaving</STRONG> (Thumb, 610 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gap_s_adv_start_powersaving &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_callback
</UL>

<P><STRONG><a name="[146]"></a>gap_s_adv_stop_powersaving</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>gap_s_scan_parameters_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>gap_s_scan_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>gap_s_scan_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>gap_s_coex_adv_data_set</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>gap_s_coex_scan_rsp_data_set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>gap_s_coex_adv_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_coex_adv_start
</UL>

<P><STRONG><a name="[8d]"></a>gap_s_coex_adv_stop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_coex_adv_stop
</UL>

<P><STRONG><a name="[14c]"></a>gap_s_coex_scan_req_data_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>gap_s_coex_scan_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>gap_s_coex_scan_stop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>gap_s_gatt_profiles_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[5a]"></a>gap_s_security_parameters_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[14f]"></a>gap_s_security_parameters_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>gap_s_security_req</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>gap_s_numeric_comrison</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Confirm_NumericComrison
</UL>

<P><STRONG><a name="[5b]"></a>gap_s_connection_param_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[151]"></a>gap_s_connection_param_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>gap_s_connection_update</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>gap_s_link_parameters_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLSetConnectionUpdate
</UL>

<P><STRONG><a name="[91]"></a>gap_s_passkey_set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPasskeyEntry
</UL>

<P><STRONG><a name="[93]"></a>gap_s_connection_latency_mode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_connection_latency_mode
</UL>

<P><STRONG><a name="[153]"></a>gap_s_check_fifo_sz</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>BBCheckTXFIFOEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_latency_callback
</UL>

<P><STRONG><a name="[2f]"></a>sw_timer_latency_callback</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sw_timer_latency_callback &rArr; _rom_gap_s_connection_latency_mode &rArr; LinkWakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_connection_latency_mode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBCheckTXFIFOEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>smart_latency_start</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_connection_latency_mode
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_evt_Callback
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_gatt_data_send
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sched_execute
</UL>

<P><STRONG><a name="[9a]"></a>smart_latency_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smart_latency_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_evt_Callback
</UL>

<P><STRONG><a name="[30]"></a>gap_evt_Callback</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gap_evt_Callback &rArr; smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_clear
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>gap_s_evt_handler_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gap_s_evt_handler_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[154]"></a>gap_s_att_c_evt_handler_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>gap_s_gatt_report_handle_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[4e]"></a>gap_s_gatt_read_rsp_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_gatt_read
</UL>

<P><STRONG><a name="[155]"></a>gap_s_gatt_write_err_rsp_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>indicate_queue_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_gatt_data_send_report_confirmation_handle
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_indicate_timer_callback
</UL>

<P><STRONG><a name="[31]"></a>sw_indicate_timer_callback</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sw_indicate_timer_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_queue_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>gap_s_gatt_data_send</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gap_s_gatt_data_send &rArr; smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_gatt_data_send
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendData
</UL>

<P><STRONG><a name="[9e]"></a>gap_s_gatt_data_send_report_confirmation_handle</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_queue_size
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[9f]"></a>gap_s_profile_data_read</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[a1]"></a>gap_s_profile_data_write</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_profile_data
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[156]"></a>att_c_mtureq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>att_c_findinforeq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>att_c_findbytypevaluereq</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>att_c_readbytypereq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>att_c_readreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>att_c_readblobreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>att_c_readmultiplereq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>att_c_readbygrouptypereq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>att_c_writereq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>att_c_writecmdreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>att_c_preparewritereq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>att_c_executewritereq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>att_c_confirmation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>bm_s_bond_manager_idx_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[163]"></a>bm_s_bond_manager_idx_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>bm_s_bond_info_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>bm_s_bond_info_add</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>bm_s_bond_info_delete_all</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>bm_s_bond_info_delete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>ecdh_public_key_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>sys_mcu_clock_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>sys_mcu_clock_set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sys_mcu_clock_set &rArr; _rom_sys_mcu_clock_set &rArr; BBMCUClockSel &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sys_mcu_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16a]"></a>sys_mcu_clock_div_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>sys_mcu_clock_div_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>sys_32k_clock_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>sys_32k_clock_set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_32k_clock_set &rArr; _rom_sys_32k_clock_set
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sys_32k_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_32k_lpo_calibration
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>pmu_32m_xo_on</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>sys_32k_lpo_calibration</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_32k_lpo_calibration
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sys_32k_clock_set
</UL>

<P><STRONG><a name="[73]"></a>sys_mcu_rc_calibration</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_mcu_rc_calibration &rArr; _sys_mcu_rc_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mcu_rc_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>pmu_32m_xo_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_32k_lpo_calibration
</UL>

<P><STRONG><a name="[a8]"></a>BBRFWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amic_set_bias
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_SetTxPower
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_rc_calibrationHF
</UL>

<P><STRONG><a name="[a9]"></a>BBRFRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_rc_calibrationHF
</UL>

<P><STRONG><a name="[a7]"></a>sys_mcu_rc_calibrationHF</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mcu_rc_calibration
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRFRead
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRFWrite
</UL>

<P><STRONG><a name="[60]"></a>pmu_wakeup_config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[16e]"></a>pmu_power_saving</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>pmu_mcu_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>pmu_system_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>pmu_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>pmu_system_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>pmu_mcu_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>pmu_32m_xo_on_polling</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>_enable_sw_ccm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>ota_code_erase</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ota_code_erase
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFwErase
</UL>

<P><STRONG><a name="[84]"></a>ota_code_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFwUpgrade
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFwWrite
</UL>

<P><STRONG><a name="[176]"></a>ota_code_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>ota_code_info_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>ota_code_update</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ota_code_update
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFwUpgrade
</UL>

<P><STRONG><a name="[75]"></a>ble_sched_execute</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_sched_execute &rArr; smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_profile_data
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>sys_rc_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>sys_fclk_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>sys_pclk_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>sys_sclk_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>sys_hclk_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>gpadc_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>pdm_set_amic_gain</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>att_c_get_mtu_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>capdet_set_bias</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>capdet_get_bias</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>module_clock_off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>module_clock_on</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>ll_length_req</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLLengthReq
</UL>

<P><STRONG><a name="[184]"></a>get_pmu_reset_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>reset_module</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>SystemSleep</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemSleep &rArr; syd8821_pmu_power_saving &rArr; syd8821_wfi
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syd8821_pmu_power_saving
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>ble_flash_authority</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_read
</UL>

<P><STRONG><a name="[186]"></a>ble_flash_erase</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>ble_flash_read</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_authority
</UL>

<P><STRONG><a name="[187]"></a>ble_flash_write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>ble_flash_write_burst</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>_checksum_cache_496kb</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>ota_code_update_496kb</STRONG> (Thumb, 204 bytes, Stack size 184 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[4c]"></a>gap_s_smart_update_latency</STRONG> (Thumb, 370 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = gap_s_smart_update_latency &rArr; _rom_gap_s_connection_latency_mode &rArr; LinkWakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_connection_latency_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLSetConnectionUpdate
</UL>

<P><STRONG><a name="[b0]"></a>smart_update_latency_updatareq</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = smart_update_latency_updatareq &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[18a]"></a>syd8821_chip_confirm</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>APPtimer_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>APPtimer_disable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>sched_callback_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>gap_s_adv_state_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>gap_s_att_mtu_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>ble_SetTxPower</STRONG> (Thumb, 470 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRFWrite
</UL>

<P><STRONG><a name="[190]"></a>ll_set_replying_packet_timer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>amic_set_bias</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRFWrite
</UL>

<P><STRONG><a name="[b9]"></a>gap_s_verdor_datas_get</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[ba]"></a>gap_s_verdor_datas_set</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[191]"></a>systemtick_delay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>Setting4kUpdate</STRONG> (Thumb, 136 bytes, Stack size 112 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[bc]"></a>SetDevAddr_toflash</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[bd]"></a>flash_peotect_key_confirm</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[90]"></a>Confirm_NumericComrison</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rom.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_numeric_comrison
</UL>

<P><STRONG><a name="[be]"></a>SmpRxPairingConfirm</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SmpRxPairingConfirm &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[bf]"></a>SmpRxPairingRandom</STRONG> (Thumb, 652 bytes, Stack size 168 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SmpRxPairingRandom &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[c1]"></a>SmpPairingReq</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SmpPairingReq &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[c2]"></a>SmpPairingPublicKey</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = SmpPairingPublicKey &rArr;  SmpPairingPublicKey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPairingPublicKey
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPairingPublicKey
</UL>

<P><STRONG><a name="[92]"></a>SmpPasskeyEntry</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_passkey_set
</UL>

<P><STRONG><a name="[c3]"></a>PreCkQueSz</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PreCkQueSz
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttIndication
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttNotify
</UL>

<P><STRONG><a name="[c4]"></a>AttNotify</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AttNotify &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreCkQueSz
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_gatt_data_send
</UL>

<P><STRONG><a name="[c5]"></a>AttIndication</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AttIndication &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreCkQueSz
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_gatt_data_send
</UL>

<P><STRONG><a name="[ce]"></a>HW_LLC_Sleep_WorkAround</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_LLC_Sleep_WorkAround
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OVER_SLPTH
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[d7]"></a>HW_WindowOffsetWorkAround</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_WindowOffsetWorkAround
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCRxPkt_Handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[d0]"></a>LLLengthRsp</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LLLengthRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLLengthReq
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[ab]"></a>LLLengthReq</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LLLengthReq &rArr; LLLengthRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLLengthRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_length_req
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[d2]"></a>rvereseArray</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rvereseArray
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLStartENCReq
</UL>

<P><STRONG><a name="[d1]"></a>LLStartENCReq</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LLStartENCReq &rArr; rvereseArray
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rvereseArray
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLENCReq
</UL>

<P><STRONG><a name="[d4]"></a>LLRxStartENCRsp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTxStartENCRsp
</UL>

<P><STRONG><a name="[d6]"></a>Protocol_Hook_Callback</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Protocol_Hook_Callback &rArr; SmpRxPairingRandom &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingConfirm
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTxStartENCRsp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLENCReq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeReq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByGroupTypeRsp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLLengthReq
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLLengthRsp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WindowOffsetWorkAround
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_LLC_Sleep_WorkAround
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPairingPublicKey
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPairingReq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingRandom
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B01_Hook_Callback
</UL>

<P><STRONG><a name="[33]"></a>B01_Hook_Callback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = B01_Hook_Callback &rArr; FW_Encrypt_Packet &rArr; aes_ccm_encrypt &rArr; cbcmac_calc &rArr; cbcmac_append &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B01_correct_TXPacket_length
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Encrypt_Packet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rom.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>_rom_init</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rom_init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_ble_init
</UL>

<P><STRONG><a name="[d9]"></a>LLTerminateReq</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_disconnect
</UL>

<P><STRONG><a name="[89]"></a>_rom_gap_s_disconnect</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTerminateReq
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_disconnect
</UL>

<P><STRONG><a name="[da]"></a>_rom_sys_32k_lpo_calibration</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, rom.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_32k_lpo_calibration
</UL>

<P><STRONG><a name="[a5]"></a>_sys_32k_lpo_calibration</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_32m_xo_off
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_32k_clock_set
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sys_32k_lpo_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_32k_lpo_calibration
</UL>

<P><STRONG><a name="[a3]"></a>_rom_sys_32k_clock_set</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rom_sys_32k_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_32k_lpo_calibration
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_32k_clock_set
</UL>

<P><STRONG><a name="[9d]"></a>_rom_gap_s_gatt_data_send</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _rom_gap_s_gatt_data_send &rArr; AttIndication &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttIndication
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_gatt_data_send
</UL>

<P><STRONG><a name="[8c]"></a>_rom_gap_s_coex_adv_start</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rom.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_coex_adv_start
</UL>

<P><STRONG><a name="[8e]"></a>_rom_gap_s_coex_adv_stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rom.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_coex_adv_stop
</UL>

<P><STRONG><a name="[dc]"></a>BBRXFIFORead</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = BBRXFIFORead &rArr; aes_ccm_verify &rArr; cbcmac_verify &rArr; ctr_next_ctr_block &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_verify
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_decrypt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_NONCE
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCRxPkt_Handler
</UL>

<P><STRONG><a name="[e2]"></a>LCTxPkt_Handler</STRONG> (Thumb, 288 bytes, Stack size 544 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = LCTxPkt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>ConnectionLost</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ConnectionLost &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_IRQHandler
</UL>

<P><STRONG><a name="[c]"></a>LLC_IRQHandler</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LLC_IRQHandler &rArr; _LCRxPkt_Handler &rArr; BBRXFIFORead &rArr; aes_ccm_verify &rArr; cbcmac_verify &rArr; ctr_next_ctr_block &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCConnEvt_Handler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCRxPkt_Handler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectionLost
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCTxPkt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>_sys_mcu_rc_calibration</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_mcu_rc_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_rc_calibrationHF
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_rc_calibration
</UL>

<P><STRONG><a name="[192]"></a>_rom_sys_mcu_clock_div_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rom.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>_rom_sys_mcu_clock_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rom.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>BBMCUClockSel</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BBMCUClockSel &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sys_mcu_clock_set
</UL>

<P><STRONG><a name="[a2]"></a>_rom_sys_mcu_clock_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rom_sys_mcu_clock_set &rArr; BBMCUClockSel &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBMCUClockSel
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_clock_set
</UL>

<P><STRONG><a name="[e5]"></a>_rom_ota_code_erase</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[94]"></a>_rom_gap_s_connection_latency_mode</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rom_gap_s_connection_latency_mode &rArr; LinkWakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkWakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_latency_callback
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_connection_latency_mode
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_smart_update_latency
</UL>

<P><STRONG><a name="[194]"></a>RCOSC_validate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pmu.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>syd8821_pmu_power_saving</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, pmu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = syd8821_pmu_power_saving &rArr; syd8821_wfi
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syd8821_wfi
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep
</UL>

<P><STRONG><a name="[cd]"></a>aes_ccm_encrypt</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = aes_ccm_encrypt &rArr; cbcmac_calc &rArr; cbcmac_append &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_mic
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_payload
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Encrypt_Packet
</UL>

<P><STRONG><a name="[de]"></a>aes_ccm_decrypt</STRONG> (Thumb, 152 bytes, Stack size 88 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = aes_ccm_decrypt &rArr; cbcmac_calc &rArr; cbcmac_append &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_mic
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_payload
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRXFIFORead
</UL>

<P><STRONG><a name="[dd]"></a>aes_ccm_verify</STRONG> (Thumb, 96 bytes, Stack size 88 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = aes_ccm_verify &rArr; cbcmac_verify &rArr; ctr_next_ctr_block &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_mic
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRXFIFORead
</UL>

<P><STRONG><a name="[cc]"></a>CCM_NONCE</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCM_NONCE
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Encrypt_Packet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRXFIFORead
</UL>

<P><STRONG><a name="[e9]"></a>aes_encrypt</STRONG> (Thumb, 24 bytes, Stack size 184 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expandKey
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_append
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_mic
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_next_ctr_block
</UL>

<P><STRONG><a name="[f4]"></a>aes_decrypt</STRONG> (Thumb, 26 bytes, Stack size 184 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decr
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expandKey
</UL>

<P><STRONG><a name="[c0]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLENCReq
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectionLost
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingRandom
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingConfirm
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCRxPkt_Handler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLENCReq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Encrypt_Packet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeValRsp
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeChartRsp
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeServiceRsp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByGroupTypeRsp
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevAddr_toflash
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting4kUpdate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_verdor_datas_set
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_update_496kb
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_profile_data_write
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_gatt_data_send_report_confirmation_handle
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_evt_Callback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvtCommandComplete
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_rsp
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_adv_start_powersaving
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_all
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_callback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_append
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_mic
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_payload
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_verify
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_calc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_next_ctr_block
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encrypt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectionLost
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRXFIFORead
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttIndication
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttNotify
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPairingPublicKey
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPairingReq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingRandom
</UL>

<P><STRONG><a name="[195]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[f6]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPasskeyEntry
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_update_496kb
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_clear
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_clear
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_next_ctr_block
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectionLost
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRXFIFORead
</UL>

<P><STRONG><a name="[196]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCRxPkt_Handler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Encrypt_Packet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeValRsp
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeChartRsp
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeServiceRsp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByGroupTypeRsp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_peotect_key_confirm
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDevAddr_toflash
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setting4kUpdate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_verdor_datas_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_verdor_datas_get
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_update_496kb
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_authority
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_profile_data_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_profile_data_read
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_evt_Callback
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_profile_data
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_erase
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFwUpgrade
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_evt_handler_set
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_callback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_ota_code_erase
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLStartENCReq
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingRandom
</UL>

<P><STRONG><a name="[199]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_uwrite4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLENCReq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_update_496kb
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_evt_handler_set
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[19a]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_adv_start_powersaving
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTerminateReq
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreCkQueSz
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingRandom
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_to_ble_transfer
</UL>

<P><STRONG><a name="[19d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
</UL>

<P><STRONG><a name="[f9]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
</UL>

<P><STRONG><a name="[ff]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[fe]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
</UL>

<P><STRONG><a name="[1a2]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
</UL>

<P><STRONG><a name="[1a3]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
</UL>

<P><STRONG><a name="[1a4]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
</UL>

<P><STRONG><a name="[1a5]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
</UL>

<P><STRONG><a name="[1a6]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[1a7]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
</UL>

<P><STRONG><a name="[1a8]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3f]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1a9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1aa]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1ab]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>syd8821_wfi</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, pmu.o(PMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syd8821_wfi
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syd8821_pmu_power_saving
</UL>

<P><STRONG><a name="[56]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_SetTxPower
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_callback
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBMCUClockSel
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
</UL>

<P><STRONG><a name="[107]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)

<P><STRONG><a name="[109]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[44]"></a>setup_adv_data</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setup_adv_data &rArr; gap_s_adv_data_set
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_ble_address_get
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_adv_parameters_set
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_adv_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_init
</UL>

<P><STRONG><a name="[4d]"></a>ble_gatt_read</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ble_gatt_read &rArr; BLE_SendData &rArr; gap_s_gatt_data_send &rArr; smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_rsp
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_gatt_read_rsp_set
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_callback
</UL>

<P><STRONG><a name="[50]"></a>ble_gatt_write</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ble_gatt_write &rArr; ota_cmd &rArr; BLSetConnectionUpdate &rArr; BLE_SendData &rArr; gap_s_gatt_data_send &rArr; smart_latency_start &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_cmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_all
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_callback
</UL>

<P><STRONG><a name="[57]"></a>ble_init</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_init &rArr; gap_s_ble_init &rArr; _rom_init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_wakeup_config
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_security_parameters_set
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_gatt_report_handle_get
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_gatt_profiles_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_evt_handler_set
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_connection_param_set
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_ble_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bm_s_bond_manager_idx_set
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_adv_data
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_uart_init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Module_Init
</UL>

<P><STRONG><a name="[7a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_1_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_0_init
</UL>

<P><STRONG><a name="[79]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_1_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_0_init
</UL>

<P><STRONG><a name="[80]"></a>EvtCommandComplete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EvtCommandComplete &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFwUpgrade
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFwWrite
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdFwErase
</UL>

<P><STRONG><a name="[81]"></a>CmdFwErase</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CmdFwErase &rArr; EvtCommandComplete &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_erase
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvtCommandComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_cmd
</UL>

<P><STRONG><a name="[83]"></a>CmdFwWrite</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CmdFwWrite &rArr; EvtCommandComplete &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_write
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvtCommandComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_cmd
</UL>

<P><STRONG><a name="[85]"></a>CmdFwUpgrade</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ota.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CmdFwUpgrade &rArr; EvtCommandComplete &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_write
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_update
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvtCommandComplete
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_cmd
</UL>

<P><STRONG><a name="[a0]"></a>update_profile_data</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_profile_data
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_profile_data_write
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sched_execute
</UL>

<P><STRONG><a name="[c6]"></a>AttReadByGroupTypeRsp</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AttReadByGroupTypeRsp &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[c7]"></a>AttReadByTypeServiceRsp</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AttReadByTypeServiceRsp &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeReq
</UL>

<P><STRONG><a name="[c8]"></a>AttReadByTypeChartRsp</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AttReadByTypeChartRsp &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeReq
</UL>

<P><STRONG><a name="[c9]"></a>AttReadByTypeValRsp</STRONG> (Thumb, 462 bytes, Stack size 72 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AttReadByTypeValRsp &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeReq
</UL>

<P><STRONG><a name="[ca]"></a>AttReadByTypeReq</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AttReadByTypeReq &rArr; AttReadByTypeValRsp &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeValRsp
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeChartRsp
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeServiceRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[cb]"></a>FW_Encrypt_Packet</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FW_Encrypt_Packet &rArr; aes_ccm_encrypt &rArr; cbcmac_calc &rArr; cbcmac_append &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encrypt
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_NONCE
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B01_Hook_Callback
</UL>

<P><STRONG><a name="[cf]"></a>Get_OVER_SLPTH</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkWakeup
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_LLC_Sleep_WorkAround
</UL>

<P><STRONG><a name="[d3]"></a>LLENCReq</STRONG> (Thumb, 526 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LLENCReq &rArr; LLStartENCReq &rArr; rvereseArray
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLStartENCReq
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[d5]"></a>LLTxStartENCRsp</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LLTxStartENCRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLRxStartENCRsp
</UL>

<P><STRONG><a name="[df]"></a>_LCRxPkt_Handler</STRONG> (Thumb, 560 bytes, Stack size 48 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = _LCRxPkt_Handler &rArr; BBRXFIFORead &rArr; aes_ccm_verify &rArr; cbcmac_verify &rArr; ctr_next_ctr_block &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BBRXFIFO_Coex_Read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRXFIFORead
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WindowOffsetWorkAround
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>_BBRXFIFO_Coex_Read</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _BBRXFIFO_Coex_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCRxPkt_Handler
</UL>

<P><STRONG><a name="[e3]"></a>_LCConnEvt_Handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LCConnEvt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>LinkWakeup</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LinkWakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OVER_SLPTH
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_connection_latency_mode
</UL>

<P><STRONG><a name="[e8]"></a>ctr_next_ctr_block</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ctr_next_ctr_block &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_payload
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_verify
</UL>

<P><STRONG><a name="[ea]"></a>cbcmac_calc</STRONG> (Thumb, 318 bytes, Stack size 72 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = cbcmac_calc &rArr; cbcmac_append &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_append
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encrypt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_decrypt
</UL>

<P><STRONG><a name="[ed]"></a>cbcmac_verify</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = cbcmac_verify &rArr; ctr_next_ctr_block &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_append
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_clear
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_next_ctr_block
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_verify
</UL>

<P><STRONG><a name="[ee]"></a>ctr_payload</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ctr_payload &rArr; ctr_next_ctr_block &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_next_ctr_block
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encrypt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_decrypt
</UL>

<P><STRONG><a name="[ef]"></a>ctr_mic</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ctr_mic &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_verify
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encrypt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_decrypt
</UL>

<P><STRONG><a name="[eb]"></a>cbcmac_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cbcmac_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_verify
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_calc
</UL>

<P><STRONG><a name="[ec]"></a>cbcmac_append</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = cbcmac_append &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_verify
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_calc
</UL>

<P><STRONG><a name="[f3]"></a>expandKey</STRONG> (Thumb, 186 bytes, Stack size 28 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = expandKey
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[f0]"></a>aes_encr</STRONG> (Thumb, 912 bytes, Stack size 88 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;galois_mul2
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[f2]"></a>aes_decr</STRONG> (Thumb, 1124 bytes, Stack size 88 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;galois_mul2
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[f1]"></a>galois_mul2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encr
</UL>

<P><STRONG><a name="[fb]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[fa]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[10a]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[108]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[105]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>

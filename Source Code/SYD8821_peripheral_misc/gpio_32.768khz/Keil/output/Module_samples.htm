<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\Module_samples.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\Module_samples.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Tue Sep 03 19:32:02 2019
<BR><P>
<H3>Maximum Stack Usage =        560 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
LLC_IRQHandler &rArr; LCTxPkt_Handler
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[20]">CAPDET_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">CAPDET_IRQHandler</a><BR>
 <LI><a href="#[7b]">SmpPairingPublicKey</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7b]">SmpPairingPublicKey</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">B01_Hook_Callback</a> from rom.o(.text) referenced from rom.o(.text)
 <LI><a href="#[20]">CAPDET_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1e]">GPADC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[6]">GPIO_IRQHandler</a> from gpio.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[a]">I2CM0_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[b]">I2CM1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[e]">I2CS_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[24]">I2S_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[25]">INTCOMB_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1c]">IR_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1b]">ISO_7816_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[22]">LLC2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[23]">LLC3_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[7]">LLC_IRQHandler</a> from rom.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[19]">M2M_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[21]">PDM_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[16]">PWM1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[17]">PWM2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[18]">PWM3_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1a]">RTC_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[8]">SPIM_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[9]">SPIS_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[15]">SW_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[27]">SystemInit</a> from system_armcm0.o(.text) referenced from startup_armcm0.o(.text)
 <LI><a href="#[f]">TIMER0_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[10]">TIMER1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[11]">TIMER2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[12]">TIMER3_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[13]">TIMER4_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1d]">TRNG_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[c]">UART0_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[1f]">UART1_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[d]">UART2_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[14]">WDT_IRQHandler</a> from startup_armcm0.o(.text) referenced from startup_armcm0.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_armcm0.o(.text)
 <LI><a href="#[2a]">gap_evt_Callback</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[26]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2b]">sw_indicate_timer_callback</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[29]">sw_timer_latency_callback</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[2c]">sw_timer_update_callback</a> from main.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bc]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[be]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[bf]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[c0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[c1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[c2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[91]"></a>B01_correct_TXPacket_length</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rom.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B01_Hook_Callback
</UL>

<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = main &rArr; sys_mcu_clock_set &rArr; _rom_sys_mcu_clock_set &rArr; BBMCUClockSel &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_rc_calibration
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_clock_set
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_32k_clock_set
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pad_mux_write
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_ble_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c3]"></a>gpi_irq_set_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>gpi_config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>pad_input_configure</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>gpo_config</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>gpo_toggle</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>gpo_set</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>gpo_clr</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>gpi_get_val</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>gpi_enable_int</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>gpi_disable_int</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>GPIO_IRQHandler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>delay_ms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>delay_us</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>pad_mux_read</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pad_mux_ctrl.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>pad_mux_write</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pad_mux_ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pad_mux_write
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAPDET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPDET_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAPDET_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>I2CM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>I2CM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>I2CS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>INTCOMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ISO_7816_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>LLC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>LLC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>M2M_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PWM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SPIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SPIS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_armcm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>sw_timer_update_callback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>gap_s_ble_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = gap_s_ble_init &rArr; _rom_init
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>gap_s_disconnect</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_disconnect
</UL>

<P><STRONG><a name="[d0]"></a>gap_s_validate_irk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>gap_s_ble_gen_random_private_address</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>gap_s_ble_address_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>gap_s_ble_address_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>gap_s_ble_feature_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>gap_s_ble_feature_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>gap_s_ble_slave_feature_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>gap_s_ble_slave_feature_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>gap_s_adv_access_code_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>gap_s_adv_access_code_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>gap_s_adv_parameters_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>gap_s_adv_data_set</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>gap_s_adv_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>gap_s_adv_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>gap_s_adv_start_powersaving</STRONG> (Thumb, 610 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[de]"></a>gap_s_adv_stop_powersaving</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>gap_s_scan_parameters_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>gap_s_scan_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>gap_s_scan_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>gap_s_coex_adv_data_set</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>gap_s_coex_scan_rsp_data_set</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>gap_s_coex_adv_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_coex_adv_start
</UL>

<P><STRONG><a name="[3e]"></a>gap_s_coex_adv_stop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_coex_adv_stop
</UL>

<P><STRONG><a name="[e4]"></a>gap_s_coex_scan_req_data_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>gap_s_coex_scan_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>gap_s_coex_scan_stop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>gap_s_gatt_profiles_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>gap_s_security_parameters_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[e9]"></a>gap_s_security_parameters_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>gap_s_security_req</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>gap_s_numeric_comrison</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Confirm_NumericComrison
</UL>

<P><STRONG><a name="[eb]"></a>gap_s_connection_param_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>gap_s_connection_param_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>gap_s_connection_update</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>gap_s_link_parameters_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>gap_s_passkey_set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPasskeyEntry
</UL>

<P><STRONG><a name="[44]"></a>gap_s_connection_latency_mode</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_connection_latency_mode
</UL>

<P><STRONG><a name="[ef]"></a>gap_s_check_fifo_sz</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>BBCheckTXFIFOEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_latency_callback
</UL>

<P><STRONG><a name="[29]"></a>sw_timer_latency_callback</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sw_timer_latency_callback &rArr; _rom_gap_s_connection_latency_mode &rArr; LinkWakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_connection_latency_mode
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBCheckTXFIFOEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>smart_latency_start</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = smart_latency_start &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_connection_latency_mode
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sched_execute
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_gatt_data_send
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_evt_Callback
</UL>

<P><STRONG><a name="[4c]"></a>smart_latency_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smart_latency_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_evt_Callback
</UL>

<P><STRONG><a name="[2a]"></a>gap_evt_Callback</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gap_evt_Callback &rArr; smart_latency_start &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_clear
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>gap_s_evt_handler_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[f0]"></a>gap_s_att_c_evt_handler_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>gap_s_gatt_report_handle_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>gap_s_gatt_read_rsp_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>gap_s_gatt_write_err_rsp_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>indicate_queue_size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_gatt_data_send_report_confirmation_handle
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_indicate_timer_callback
</UL>

<P><STRONG><a name="[2b]"></a>sw_indicate_timer_callback</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sw_indicate_timer_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_queue_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>gap_s_gatt_data_send</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_gatt_data_send
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
</UL>

<P><STRONG><a name="[54]"></a>gap_s_gatt_data_send_report_confirmation_handle</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indicate_queue_size
</UL>

<P><STRONG><a name="[55]"></a>gap_s_profile_data_read</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[57]"></a>gap_s_profile_data_write</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_profile_data
</UL>

<P><STRONG><a name="[f4]"></a>att_c_mtureq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>att_c_findinforeq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>att_c_findbytypevaluereq</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>att_c_readbytypereq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>att_c_readreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>att_c_readblobreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>att_c_readmultiplereq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>att_c_readbygrouptypereq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>att_c_writereq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>att_c_writecmdreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>att_c_preparewritereq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>att_c_executewritereq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>att_c_confirmation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>bm_s_bond_manager_idx_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>bm_s_bond_manager_idx_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>bm_s_bond_info_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>bm_s_bond_info_add</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>bm_s_bond_info_delete_all</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>bm_s_bond_info_delete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>ecdh_public_key_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>sys_mcu_clock_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>sys_mcu_clock_set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sys_mcu_clock_set &rArr; _rom_sys_mcu_clock_set &rArr; BBMCUClockSel &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sys_mcu_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[109]"></a>sys_mcu_clock_div_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>sys_mcu_clock_div_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>sys_32k_clock_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>sys_32k_clock_set</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sys_32k_clock_set &rArr; _rom_sys_32k_clock_set
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sys_32k_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_32k_lpo_calibration
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10c]"></a>pmu_32m_xo_on</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>sys_32k_lpo_calibration</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_32k_lpo_calibration
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sys_32k_clock_set
</UL>

<P><STRONG><a name="[31]"></a>sys_mcu_rc_calibration</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sys_mcu_rc_calibration &rArr; _sys_mcu_rc_calibration
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mcu_rc_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>pmu_32m_xo_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_32k_lpo_calibration
</UL>

<P><STRONG><a name="[5e]"></a>BBRFWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amic_set_bias
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_SetTxPower
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepHF
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_rc_calibrationHF
</UL>

<P><STRONG><a name="[5f]"></a>BBRFRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepHF
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_rc_calibrationHF
</UL>

<P><STRONG><a name="[5d]"></a>sys_mcu_rc_calibrationHF</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_mcu_rc_calibration
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRFRead
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRFWrite
</UL>

<P><STRONG><a name="[10d]"></a>pmu_wakeup_config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>pmu_power_saving</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>pmu_mcu_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>pmu_system_off</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>pmu_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>pmu_system_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>pmu_mcu_reset</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>pmu_32m_xo_on_polling</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>_enable_sw_ccm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>ota_code_erase</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[116]"></a>ota_code_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>ota_code_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>ota_code_info_read</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>ota_code_update</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>ble_sched_execute</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_profile_data
</UL>

<P><STRONG><a name="[11a]"></a>sys_rc_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[11b]"></a>sys_fclk_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>sys_pclk_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>sys_sclk_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>sys_hclk_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>gpadc_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>pdm_set_amic_gain</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>att_c_get_mtu_size</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>capdet_set_bias</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>capdet_get_bias</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>module_clock_off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>module_clock_on</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>ll_length_req</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLLengthReq
</UL>

<P><STRONG><a name="[126]"></a>get_pmu_reset_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>reset_module</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>SystemSleep</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syd8821_pmu_power_saving
</UL>

<P><STRONG><a name="[66]"></a>SystemSleepHF</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syd8821_pmu_power_saving
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRFRead
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRFWrite
</UL>

<P><STRONG><a name="[67]"></a>ble_flash_authority</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_read
</UL>

<P><STRONG><a name="[128]"></a>ble_flash_erase</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>ble_flash_read</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_authority
</UL>

<P><STRONG><a name="[129]"></a>ble_flash_write</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>ble_flash_write_burst</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>_checksum_cache_496kb</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>ota_code_update_496kb</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[6a]"></a>gap_s_smart_update_latency</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_connection_latency_mode
</UL>

<P><STRONG><a name="[6b]"></a>smart_update_latency_updatareq</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = smart_update_latency_updatareq &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[12c]"></a>syd8821_chip_confirm</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>APPtimer_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>APPtimer_disable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>sched_callback_enable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>gap_s_adv_state_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>gap_s_att_mtu_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>ble_SetTxPower</STRONG> (Thumb, 526 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRFWrite
</UL>

<P><STRONG><a name="[132]"></a>ll_set_replying_packet_timer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>amic_set_bias</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRFWrite
</UL>

<P><STRONG><a name="[75]"></a>gap_s_verdor_datas_get</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[76]"></a>gap_s_verdor_datas_set</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[133]"></a>systemtick_delay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>Confirm_NumericComrison</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rom.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_numeric_comrison
</UL>

<P><STRONG><a name="[77]"></a>SmpRxPairingConfirm</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SmpRxPairingConfirm
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[78]"></a>SmpRxPairingRandom</STRONG> (Thumb, 652 bytes, Stack size 168 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SmpRxPairingRandom &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[7a]"></a>SmpPairingReq</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SmpPairingReq
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[7b]"></a>SmpPairingPublicKey</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = SmpPairingPublicKey &rArr;  SmpPairingPublicKey (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPairingPublicKey
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPairingPublicKey
</UL>

<P><STRONG><a name="[43]"></a>SmpPasskeyEntry</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_passkey_set
</UL>

<P><STRONG><a name="[7c]"></a>PreCkQueSz</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttIndication
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttNotify
</UL>

<P><STRONG><a name="[7d]"></a>AttNotify</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreCkQueSz
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_gatt_data_send
</UL>

<P><STRONG><a name="[7e]"></a>AttIndication</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreCkQueSz
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_gatt_data_send
</UL>

<P><STRONG><a name="[87]"></a>HW_LLC_Sleep_WorkAround</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_LLC_Sleep_WorkAround
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OVER_SLPTH
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[90]"></a>HW_WindowOffsetWorkAround</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HW_WindowOffsetWorkAround
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCRxPkt_Handler
</UL>

<P><STRONG><a name="[89]"></a>LLLengthRsp</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LLLengthRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLLengthReq
</UL>

<P><STRONG><a name="[63]"></a>LLLengthReq</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LLLengthReq &rArr; LLLengthRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLLengthRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_length_req
</UL>

<P><STRONG><a name="[8b]"></a>rvereseArray</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rvereseArray
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLStartENCReq
</UL>

<P><STRONG><a name="[8a]"></a>LLStartENCReq</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LLStartENCReq &rArr; rvereseArray
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rvereseArray
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLENCReq
</UL>

<P><STRONG><a name="[8d]"></a>LLRxStartENCRsp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTxStartENCRsp
</UL>

<P><STRONG><a name="[8f]"></a>Protocol_Hook_Callback</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = Protocol_Hook_Callback &rArr; SmpRxPairingRandom &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLLengthRsp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WindowOffsetWorkAround
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_LLC_Sleep_WorkAround
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPairingPublicKey
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPairingReq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingRandom
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingConfirm
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTxStartENCRsp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLENCReq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeReq
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByGroupTypeRsp
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLLengthReq
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B01_Hook_Callback
</UL>

<P><STRONG><a name="[2d]"></a>B01_Hook_Callback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = B01_Hook_Callback &rArr; FW_Encrypt_Packet &rArr; aes_ccm_encrypt &rArr; cbcmac_calc &rArr; cbcmac_append &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B01_correct_TXPacket_length
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Encrypt_Packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rom.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>_rom_init</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rom_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_ble_init
</UL>

<P><STRONG><a name="[92]"></a>LLTerminateReq</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_disconnect
</UL>

<P><STRONG><a name="[38]"></a>_rom_gap_s_disconnect</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTerminateReq
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_disconnect
</UL>

<P><STRONG><a name="[93]"></a>_rom_sys_32k_lpo_calibration</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, rom.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_32k_lpo_calibration
</UL>

<P><STRONG><a name="[5b]"></a>_sys_32k_lpo_calibration</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sys_32k_lpo_calibration
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_32m_xo_off
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_32k_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_32k_lpo_calibration
</UL>

<P><STRONG><a name="[59]"></a>_rom_sys_32k_clock_set</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rom_sys_32k_clock_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_32k_lpo_calibration
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_32k_clock_set
</UL>

<P><STRONG><a name="[53]"></a>_rom_gap_s_gatt_data_send</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttIndication
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_gatt_data_send
</UL>

<P><STRONG><a name="[3d]"></a>_rom_gap_s_coex_adv_start</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rom.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_coex_adv_start
</UL>

<P><STRONG><a name="[3f]"></a>_rom_gap_s_coex_adv_stop</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rom.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_coex_adv_stop
</UL>

<P><STRONG><a name="[95]"></a>BBRXFIFORead</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = BBRXFIFORead &rArr; aes_ccm_verify &rArr; cbcmac_verify &rArr; ctr_next_ctr_block &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_verify
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_decrypt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_NONCE
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCRxPkt_Handler
</UL>

<P><STRONG><a name="[9b]"></a>LCTxPkt_Handler</STRONG> (Thumb, 286 bytes, Stack size 544 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = LCTxPkt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>ConnectionLost</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ConnectionLost &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>LLC_IRQHandler</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = LLC_IRQHandler &rArr; LCTxPkt_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectionLost
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCTxPkt_Handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCConnEvt_Handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCRxPkt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_armcm0.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>_sys_mcu_rc_calibration</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_mcu_rc_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_rc_calibrationHF
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_rc_calibration
</UL>

<P><STRONG><a name="[134]"></a>_rom_sys_mcu_clock_div_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rom.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>_rom_sys_mcu_clock_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rom.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>BBMCUClockSel</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BBMCUClockSel &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_sys_mcu_clock_set
</UL>

<P><STRONG><a name="[58]"></a>_rom_sys_mcu_clock_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rom_sys_mcu_clock_set &rArr; BBMCUClockSel &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBMCUClockSel
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mcu_clock_set
</UL>

<P><STRONG><a name="[9e]"></a>_rom_ota_code_erase</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, rom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>

<P><STRONG><a name="[45]"></a>_rom_gap_s_connection_latency_mode</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rom_gap_s_connection_latency_mode &rArr; LinkWakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkWakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_smart_update_latency
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sw_timer_latency_callback
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_connection_latency_mode
</UL>

<P><STRONG><a name="[136]"></a>RCOSC_validate</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pmu.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>syd8821_pmu_power_saving</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, pmu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syd8821_wfi
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepHF
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleep
</UL>

<P><STRONG><a name="[86]"></a>aes_ccm_encrypt</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = aes_ccm_encrypt &rArr; cbcmac_calc &rArr; cbcmac_append &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_mic
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_payload
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Encrypt_Packet
</UL>

<P><STRONG><a name="[97]"></a>aes_ccm_decrypt</STRONG> (Thumb, 152 bytes, Stack size 88 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = aes_ccm_decrypt &rArr; cbcmac_calc &rArr; cbcmac_append &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_mic
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_payload
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRXFIFORead
</UL>

<P><STRONG><a name="[96]"></a>aes_ccm_verify</STRONG> (Thumb, 96 bytes, Stack size 88 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = aes_ccm_verify &rArr; cbcmac_verify &rArr; ctr_next_ctr_block &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_mic
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRXFIFORead
</UL>

<P><STRONG><a name="[85]"></a>CCM_NONCE</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCM_NONCE
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRXFIFORead
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Encrypt_Packet
</UL>

<P><STRONG><a name="[a2]"></a>aes_encrypt</STRONG> (Thumb, 24 bytes, Stack size 184 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expandKey
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_append
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_mic
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_next_ctr_block
</UL>

<P><STRONG><a name="[ad]"></a>aes_decrypt</STRONG> (Thumb, 26 bytes, Stack size 184 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expandKey
</UL>

<P><STRONG><a name="[137]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTerminateReq
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreCkQueSz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingRandom
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_adv_start_powersaving
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_append
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_mic
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_payload
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_verify
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_calc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_next_ctr_block
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encrypt
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectionLost
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRXFIFORead
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttIndication
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttNotify
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPairingPublicKey
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPairingReq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingRandom
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingConfirm
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCRxPkt_Handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLENCReq
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Encrypt_Packet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeValRsp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeChartRsp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeServiceRsp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByGroupTypeRsp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_verdor_datas_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_update_496kb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_profile_data_write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_gatt_data_send_report_confirmation_handle
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_evt_Callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_adv_start_powersaving
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ae]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[13b]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_clear
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_next_ctr_block
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectionLost
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRXFIFORead
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpPasskeyEntry
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_update_496kb
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_clear
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[79]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectionLost
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingRandom
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLENCReq
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_ota_code_erase
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLStartENCReq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmpRxPairingRandom
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCRxPkt_Handler
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FW_Encrypt_Packet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeValRsp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeChartRsp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeServiceRsp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByGroupTypeRsp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_verdor_datas_set
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_verdor_datas_get
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_update_496kb
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_flash_authority
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_erase
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_profile_data_write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_profile_data_read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_evt_handler_set
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_evt_Callback
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_profile_data
</UL>

<P><STRONG><a name="[13f]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_uwrite4</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ota_code_update_496kb
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_evt_handler_set
</UL>

<P><STRONG><a name="[141]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b9]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_latency_start
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smart_update_latency_updatareq
</UL>

<P><STRONG><a name="[b4]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[143]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[144]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[145]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[b0]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[b7]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b6]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[147]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>syd8821_wfi</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, pmu.o(PMU), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syd8821_pmu_power_saving
</UL>

<P><STRONG><a name="[bb]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[73]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBMCUClockSel
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_SetTxPower
</UL>

<P><STRONG><a name="[148]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[149]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[14a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[56]"></a>update_profile_data</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_sched_execute
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_s_profile_data_write
</UL>

<P><STRONG><a name="[7f]"></a>AttReadByGroupTypeRsp</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AttReadByGroupTypeRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[80]"></a>AttReadByTypeServiceRsp</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AttReadByTypeServiceRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeReq
</UL>

<P><STRONG><a name="[81]"></a>AttReadByTypeChartRsp</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AttReadByTypeChartRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeReq
</UL>

<P><STRONG><a name="[82]"></a>AttReadByTypeValRsp</STRONG> (Thumb, 462 bytes, Stack size 72 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AttReadByTypeValRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeReq
</UL>

<P><STRONG><a name="[83]"></a>AttReadByTypeReq</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AttReadByTypeReq &rArr; AttReadByTypeValRsp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeValRsp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeChartRsp
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AttReadByTypeServiceRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[84]"></a>FW_Encrypt_Packet</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FW_Encrypt_Packet &rArr; aes_ccm_encrypt &rArr; cbcmac_calc &rArr; cbcmac_append &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encrypt
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_NONCE
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;B01_Hook_Callback
</UL>

<P><STRONG><a name="[88]"></a>Get_OVER_SLPTH</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_LLC_Sleep_WorkAround
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinkWakeup
</UL>

<P><STRONG><a name="[8c]"></a>LLENCReq</STRONG> (Thumb, 484 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LLENCReq &rArr; LLStartENCReq &rArr; rvereseArray
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLStartENCReq
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
</UL>

<P><STRONG><a name="[8e]"></a>LLTxStartENCRsp</STRONG> (Thumb, 494 bytes, Stack size 24 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LLTxStartENCRsp
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Hook_Callback
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLRxStartENCRsp
</UL>

<P><STRONG><a name="[98]"></a>_LCRxPkt_Handler</STRONG> (Thumb, 580 bytes, Stack size 48 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = _LCRxPkt_Handler &rArr; BBRXFIFORead &rArr; aes_ccm_verify &rArr; cbcmac_verify &rArr; ctr_next_ctr_block &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BBRXFIFORead
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_WindowOffsetWorkAround
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BBRXFIFO_Coex_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>_BBRXFIFO_Coex_Read</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _BBRXFIFO_Coex_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_LCRxPkt_Handler
</UL>

<P><STRONG><a name="[9c]"></a>_LCConnEvt_Handler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _LCConnEvt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLC_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>LinkWakeup</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LinkWakeup
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OVER_SLPTH
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rom_gap_s_connection_latency_mode
</UL>

<P><STRONG><a name="[a1]"></a>ctr_next_ctr_block</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ctr_next_ctr_block &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_payload
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_verify
</UL>

<P><STRONG><a name="[a3]"></a>cbcmac_calc</STRONG> (Thumb, 318 bytes, Stack size 72 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = cbcmac_calc &rArr; cbcmac_append &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_append
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encrypt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_decrypt
</UL>

<P><STRONG><a name="[a6]"></a>cbcmac_verify</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = cbcmac_verify &rArr; ctr_next_ctr_block &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_append
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_clear
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_next_ctr_block
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_verify
</UL>

<P><STRONG><a name="[a7]"></a>ctr_payload</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ctr_payload &rArr; ctr_next_ctr_block &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctr_next_ctr_block
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encrypt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_decrypt
</UL>

<P><STRONG><a name="[a8]"></a>ctr_mic</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ctr_mic &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_verify
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_encrypt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_ccm_decrypt
</UL>

<P><STRONG><a name="[a4]"></a>cbcmac_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cbcmac_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_verify
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_calc
</UL>

<P><STRONG><a name="[a5]"></a>cbcmac_append</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, aec-ccm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = cbcmac_append &rArr; aes_encrypt &rArr; aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_verify
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcmac_calc
</UL>

<P><STRONG><a name="[ac]"></a>expandKey</STRONG> (Thumb, 186 bytes, Stack size 28 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = expandKey
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[a9]"></a>aes_encr</STRONG> (Thumb, 912 bytes, Stack size 88 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = aes_encr
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;galois_mul2
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[ab]"></a>aes_decr</STRONG> (Thumb, 1124 bytes, Stack size 88 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;galois_mul2
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decrypt
</UL>

<P><STRONG><a name="[aa]"></a>galois_mul2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_decr
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encr
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
